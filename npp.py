import streamlit as st
import pandas as pd
import pickle
import requests 
import time
from datetime import datetime
from streamlit_lottie import st_lottie 

# --- Load the Trained Models ---
try:
    with open('crop_recommendation_model.pkl', 'rb') as f:
        crop_model = pickle.load(f)
except FileNotFoundError:
    st.error("Model file not found. Make sure 'crop_recommendation_model.pkl' is in the same folder.")
    st.stop()

# --- Full Translation Dictionary for All 5 Languages ---
translations = {
    "English": {
        "title": "AI CROP YIELD PREDICTION AND OPTIMIZATION ЁЯзСтАНЁЯМ╛", "subtitle": "Get data-driven advice for your farm.", "sidebar_title": "Settings", "lang_select": "Language", "tab1_title": "ЁЯМ▒ Crop Recommendation", "tab2_title": "ЁЯТб Actionable Advice", "tab3_title": "ЁЯУИ Productivity Insights", "header1": "Find the Perfect Crop", "date_label": "Select Today's Date", "location_select": "Select a Location to get Live Data", "api_button": "Fetch Live Weather Data (Real API)", "api_desc": "Select a city and click the button to get real-time weather data from a live API.", "n_label": "Nitrogen (N) in soil (kg/ha)", "p_label": "Phosphorus (P) in soil (kg/ha)", "k_label": "Potassium (K) in soil (kg/ha)", "temp_label": "Temperature (┬░C)", "hum_label": "Relative Humidity (%)", "ph_label": "Soil pH", "rain_label": "Average Annual Rainfall (mm)", "recommend_button": "Recommend My Crop", "success_msg": "The most suitable crop for your conditions is:", "header2": "Get Smart Farming Advice", "desc2": "Recommendations based on your input values.", "seasonal_advice": "Seasonal Advice", "kharif_season": "The selected date falls in the Kharif season (June-Oct). This is the main monsoon sowing season.", "rabi_season": "The selected date falls in the Rabi season (Nov-Mar). This is the winter sowing season.", "zaid_season": "The selected date falls in the Zaid season (Apr-May). This is the summer season for short-duration crops.", "fert_advice": "Fertilizer Recommendation", "n_low": "Nitrogen (N) is low. Add organic compost or a nitrogen-rich fertilizer.", "p_low": "Phosphorus (P) is low. Bone meal or a phosphate fertilizer would be beneficial.", "k_low": "Potassium (K) is low. Wood ash or potash can help root development.", "fert_ok": "Your soil's nutrient levels (N, P, K) look good!", "water_advice": "Water Management Advice", "rain_low": "Rainfall is low. Plan for consistent irrigation and consider drought-resistant crops.", "rain_ok": "Rainfall is adequate. Ensure good drainage.", "pest_advice": "Pest Control Advice", "pest_warn": "High humidity and heat can attract pests like aphids. Monitor crops closely.", "pest_ok": "Conditions are less favorable for common pests, but regular monitoring is key.", "header3": "Boosting Your Farm's Productivity", "desc3_1": "Our AI platform helps you make smarter decisions that can directly increase your farm's output.", "metric_label": "Potential Productivity Increase", "desc3_2": "How do we achieve this?", "point1": "Yield Prediction Model: Our second AI model analyzes historical data to predict potential yield.", "point2": "Reduced Waste: Smart fertilizer advice means you only use what you need, saving money.", "point3": "Risk Mitigation: Early warnings about pests and water needs help protect your crops."
    },
    "Hindi (рд╣рд┐рдиреНрджреА)": {
        "title": "рдПрдЖрдИ рдХрд┐рд╕рд╛рди рд╕рд╣рд╛рдпрдХ ЁЯзСтАНЁЯМ╛", "subtitle": "рдЕрдкрдиреЗ рдЦреЗрдд рдХреЗ рд▓рд┐рдП рдбреЗрдЯрд╛-рдЖрдзрд╛рд░рд┐рдд рд╕рд▓рд╛рд╣ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред", "sidebar_title": "рд╕реЗрдЯрд┐рдВрдЧреНрд╕", "lang_select": "рднрд╛рд╖рд╛", "tab1_title": "ЁЯМ▒ рдлрд╕рд▓ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢", "tab2_title": "ЁЯТб рдХрд╛рд░реНрд░рд╡рд╛рдИ рдпреЛрдЧреНрдп рд╕рд▓рд╛рд╣", "tab3_title": "ЁЯУИ рдЙрддреНрдкрд╛рджрдХрддрд╛ рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐", "header1": "рд╕рд╣реА рдлрд╕рд▓ рдЦреЛрдЬреЗрдВ", "date_label": "рдЖрдЬ рдХреА рддрд╛рд░реАрдЦ рдЪреБрдиреЗрдВ", "location_select": "рд▓рд╛рдЗрд╡ рдбреЗрдЯрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рд╕реНрдерд╛рди рдЪреБрдиреЗрдВ", "api_button": "рд▓рд╛рдЗрд╡ рдореМрд╕рдо рдбреЗрдЯрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ (рд░рд┐рдпрд▓ рдПрдкреАрдЖрдИ)", "api_desc": "рдПрдХ рд╢рд╣рд░ рдЪреБрдиреЗрдВ рдФрд░ рд▓рд╛рдЗрд╡ рдПрдкреАрдЖрдИ рд╕реЗ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╕рдордп рдХрд╛ рдореМрд╕рдо рдбреЗрдЯрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред", "n_label": "рдорд┐рдЯреНрдЯреА рдореЗрдВ рдирд╛рдЗрдЯреНрд░реЛрдЬрди (N) (рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░)", "p_label": "рдорд┐рдЯреНрдЯреА рдореЗрдВ рдлрд╛рд╕реНрдлреЛрд░рд╕ (P) (рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░)", "k_label": "рдорд┐рдЯреНрдЯреА рдореЗрдВ рдкреЛрдЯреЗрд╢рд┐рдпрдо (K) (рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░)", "temp_label": "рддрд╛рдкрдорд╛рди (┬░C)", "hum_label": "рд╕рд╛рдкреЗрдХреНрд╖ рдЖрд░реНрджреНрд░рддрд╛ (%)", "ph_label": "рдорд┐рдЯреНрдЯреА рдХрд╛ рдкреАрдПрдЪ", "rain_label": "рдФрд╕рдд рд╡рд╛рд░реНрд╖рд┐рдХ рд╡рд░реНрд╖рд╛ (рдорд┐рдореА)", "recommend_button": "рдореЗрд░реА рдлрд╕рд▓ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХрд░реЗрдВ", "success_msg": "рдЖрдкрдХреА рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП рд╕рдмрд╕реЗ рдЙрдкрдпреБрдХреНрдд рдлрд╕рд▓ рд╣реИ:", "header2": "рд╕реНрдорд╛рд░реНрдЯ рдЦреЗрддреА рдХреА рд╕рд▓рд╛рд╣ рд▓реЗрдВ", "desc2": "рдЖрдкрдХреЗ рдЗрдирдкреБрдЯ рдореВрд▓реНрдпреЛрдВ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВред", "seasonal_advice": "рдореМрд╕рдореА рд╕рд▓рд╛рд╣", "kharif_season": "рдЪреБрдиреА рдЧрдИ рддрд╛рд░реАрдЦ рдЦрд░реАрдл рдореМрд╕рдо (рдЬреВрди-рдЕрдХреНрдЯреВрдмрд░) рдореЗрдВ рдЖрддреА рд╣реИред рдпрд╣ рдореБрдЦреНрдп рдорд╛рдирд╕реВрди рдмреБрд╡рд╛рдИ рдХрд╛ рдореМрд╕рдо рд╣реИред", "rabi_season": "рдЪреБрдиреА рдЧрдИ рддрд╛рд░реАрдЦ рд░рдмреА рдореМрд╕рдо (рдирд╡рдВрдмрд░-рдорд╛рд░реНрдЪ) рдореЗрдВ рдЖрддреА рд╣реИред рдпрд╣ рд╕рд░реНрджрд┐рдпреЛрдВ рдХреА рдмреБрд╡рд╛рдИ рдХрд╛ рдореМрд╕рдо рд╣реИред", "zaid_season": "рдЪреБрдиреА рдЧрдИ рддрд╛рд░реАрдЦ рдЬрд╛рдпрдж рдореМрд╕рдо (рдЕрдкреНрд░реИрд▓-рдордИ) рдореЗрдВ рдЖрддреА рд╣реИред рдпрд╣ рдХрдо рдЕрд╡рдзрд┐ рдХреА рдлрд╕рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рдЧрд░реНрдореА рдХрд╛ рдореМрд╕рдо рд╣реИред", "fert_advice": "рдЙрд░реНрд╡рд░рдХ рдХреА рд╕рд┐рдлрд╛рд░рд┐рд╢", "n_low": "рдирд╛рдЗрдЯреНрд░реЛрдЬрди (N) рдХрдо рд╣реИред рдЬреИрд╡рд┐рдХ рдЦрд╛рдж рдпрд╛ рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдпреБрдХреНрдд рдЙрд░реНрд╡рд░рдХ рдбрд╛рд▓реЗрдВред", "p_low": "рдлрд╛рд╕реНрдлреЛрд░рд╕ (P) рдХрдо рд╣реИред рд╣рдбреНрдбреА рдХрд╛ рдЪреВрд░рд╛ рдпрд╛ рдлреЙрд╕реНрдлреЗрдЯ рдЙрд░реНрд╡рд░рдХ рдлрд╛рдпрджреЗрдордВрдж рд╣реЛрдЧрд╛ред", "k_low": "рдкреЛрдЯреЗрд╢рд┐рдпрдо (K) рдХрдо рд╣реИред рд▓рдХрдбрд╝реА рдХреА рд░рд╛рдЦ рдпрд╛ рдкреЛрдЯрд╛рд╢ рдЬрдбрд╝реЛрдВ рдХреЗ рд╡рд┐рдХрд╛рд╕ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реИред", "fert_ok": "рдЖрдкрдХреА рдорд┐рдЯреНрдЯреА рдХреЗ рдкреЛрд╖рдХ рддрддреНрд╡ (N, P, K) рдХрд╛ рд╕реНрддрд░ рдЕрдЪреНрдЫрд╛ рд▓рдЧ рд░рд╣рд╛ рд╣реИ!", "water_advice": "рдЬрд▓ рдкреНрд░рдмрдВрдзрди рд╕рд▓рд╛рд╣", "rain_low": "рд╡рд░реНрд╖рд╛ рдХрдо рд╣реИред рд▓рдЧрд╛рддрд╛рд░ рд╕рд┐рдВрдЪрд╛рдИ рдХреА рдпреЛрдЬрдирд╛ рдмрдирд╛рдПрдВ рдФрд░ рд╕реВрдЦрд╛ рдкреНрд░рддрд┐рд░реЛрдзреА рдлрд╕рд▓реЛрдВ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реЗрдВред", "rain_ok": "рд╡рд░реНрд╖рд╛ рдкрд░реНрдпрд╛рдкреНрдд рд╣реИред рдЕрдЪреНрдЫреА рдЬрд▓ рдирд┐рдХрд╛рд╕реА рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВред", "pest_advice": "рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг рд╕рд▓рд╛рд╣", "pest_warn": "рдЙрдЪреНрдЪ рдЖрд░реНрджреНрд░рддрд╛ рдФрд░ рдЧрд░реНрдореА рдПрдлрд┐рдбреНрд╕ рдЬреИрд╕реЗ рдХреАрдЯреЛрдВ рдХреЛ рдЖрдХрд░реНрд╖рд┐рдд рдХрд░ рд╕рдХрддреА рд╣реИред рдлрд╕рд▓реЛрдВ рдХреА рдмрд╛рд░реАрдХреА рд╕реЗ рдирд┐рдЧрд░рд╛рдиреА рдХрд░реЗрдВред", "pest_ok": "рдЖрдо рдХреАрдЯреЛрдВ рдХреЗ рд▓рд┐рдП рд╕реНрдерд┐рддрд┐рдпрд╛рдБ рдХрдо рдЕрдиреБрдХреВрд▓ рд╣реИрдВ, рд▓реЗрдХрд┐рди рдирд┐рдпрдорд┐рдд рдирд┐рдЧрд░рд╛рдиреА рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╣реИред", "header3": "рдЕрдкрдиреЗ рдЦреЗрдд рдХреА рдЙрддреНрдкрд╛рджрдХрддрд╛ рдмрдврд╝рд╛рдирд╛", "desc3_1": "рд╣рдорд╛рд░рд╛ рдПрдЖрдИ рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рдЖрдкрдХреЛ рдмреЗрд╣рддрд░ рдирд┐рд░реНрдгрдп рд▓реЗрдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИ рдЬреЛ рд╕реАрдзреЗ рдЖрдкрдХреЗ рдЦреЗрдд рдХреЗ рдЙрддреНрдкрд╛рджрди рдХреЛ рдмрдврд╝рд╛ рд╕рдХрддрд╛ рд╣реИред", "metric_label": "рд╕рдВрднрд╛рд╡рд┐рдд рдЙрддреНрдкрд╛рджрдХрддрд╛ рд╡реГрджреНрдзрд┐", "desc3_2": "рд╣рдо рдЗрд╕реЗ рдХреИрд╕реЗ рдкреНрд░рд╛рдкреНрдд рдХрд░рддреЗ рд╣реИрдВ?", "point1": "рдЙрдкрдЬ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдореЙрдбрд▓: рд╣рдорд╛рд░рд╛ рджреВрд╕рд░рд╛ рдПрдЖрдИ рдореЙрдбрд▓ рд╕рдВрднрд╛рд╡рд┐рдд рдЙрдкрдЬ рдХреА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдРрддрд┐рд╣рд╛рд╕рд┐рдХ рдбреЗрдЯрд╛ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рддрд╛ рд╣реИред", "point2": "рдХрдо рдмрд░реНрдмрд╛рджреА: рд╕реНрдорд╛рд░реНрдЯ рдЙрд░реНрд╡рд░рдХ рд╕рд▓рд╛рд╣ рдХрд╛ рдорддрд▓рдм рд╣реИ рдХрд┐ рдЖрдк рдХреЗрд╡рд▓ рдЕрдкрдиреА рдЬрд░реВрд░рдд рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддреЗ рд╣реИрдВ, рдЬрд┐рд╕рд╕реЗ рдкреИрд╕реЗ рдХреА рдмрдЪрдд рд╣реЛрддреА рд╣реИред", "point3": "рдЬреЛрдЦрд┐рдо рдореЗрдВ рдХрдореА: рдХреАрдЯреЛрдВ рдФрд░ рдкрд╛рдиреА рдХреА рдЬрд░реВрд░рддреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╢реБрд░реБрдЖрддреА рдЪреЗрддрд╛рд╡рдирд┐рдпрд╛рдБ рдЖрдкрдХреА рдлрд╕рд▓реЛрдВ рдХреА рд░рдХреНрд╖рд╛ рдХрд░рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддреА рд╣реИрдВред"
    },
    "Marathi (рдорд░рд╛рдареА)": {
        "title": "рдПрдЖрдп рд╢реЗрддрдХрд░реА рд╕рд╣рд╛рдпреНрдпрдХ ЁЯзСтАНЁЯМ╛", "subtitle": "рддреБрдордЪреНрдпрд╛ рд╢реЗрддрд╛рд╕рд╛рдареА рдбреЗрдЯрд╛-рдЖрдзрд╛рд░рд┐рдд рд╕рд▓реНрд▓рд╛ рдорд┐рд│рд╡рд╛.", "sidebar_title": "рд╕реЗрдЯрд┐рдВрдЧреНрдЬ", "lang_select": "рднрд╛рд╖рд╛", "tab1_title": "ЁЯМ▒ рдкреАрдХ рд╢рд┐рдлрд╛рд░рд╕", "tab2_title": "ЁЯТб рдХреГрддреАрдпреЛрдЧреНрдп рд╕рд▓реНрд▓рд╛", "tab3_title": "ЁЯУИ рдЙрддреНрдкрд╛рджрдХрддрд╛ рдЕрдВрддрд░реНрджреГрд╖реНрдЯреА", "header1": "рдпреЛрдЧреНрдп рдкреАрдХ рд╢реЛрдзрд╛", "date_label": "рдЖрдЬрдЪреА рддрд╛рд░реАрдЦ рдирд┐рд╡рдбрд╛", "location_select": "рдереЗрдЯ рдбреЗрдЯрд╛ рдорд┐рд│рд╡рд┐рдгреНрдпрд╛рд╕рд╛рдареА рд╕реНрдерд╛рди рдирд┐рд╡рдбрд╛", "api_button": "рдереЗрдЯ рд╣рд╡рд╛рдорд╛рди рдбреЗрдЯрд╛ рдорд┐рд│рд╡рд╛ (рд╡рд╛рд╕реНрддрд╡рд┐рдХ API)", "api_desc": "рд╢рд╣рд░ рдирд┐рд╡рдбрд╛ рдЖрдгрд┐ рдереЗрдЯ API рд╡рд░реВрди рд╣рд╡рд╛рдорд╛рди рдбреЗрдЯрд╛ рдорд┐рд│рд╡рдгреНрдпрд╛рд╕рд╛рдареА рдмрдЯрдгрд╛рд╡рд░ рдХреНрд▓рд┐рдХ рдХрд░рд╛.", "n_label": "рдорд╛рддреАрддреАрд▓ рдирд╛рдпрдЯреНрд░реЛрдЬрди (N) (рдХрд┐рд▓реЛ/рд╣реЗрдХреНрдЯрд░)", "p_label": "рдорд╛рддреАрддреАрд▓ рдлреЙрд╕реНрдлрд░рд╕ (P) (рдХрд┐рд▓реЛ/рд╣реЗрдХреНрдЯрд░)", "k_label": "рдорд╛рддреАрддреАрд▓ рдкреЛрдЯреЕрд╢рд┐рдпрдо (K) (рдХрд┐рд▓реЛ/рд╣реЗрдХреНрдЯрд░)", "temp_label": "рддрд╛рдкрдорд╛рди (┬░C)", "hum_label": "рд╕рд╛рдкреЗрдХреНрд╖ рдЖрд░реНрджреНрд░рддрд╛ (%)", "ph_label": "рдорд╛рддреАрдЪрд╛ рдкреАрдПрдЪ", "rain_label": "рд╕рд░рд╛рд╕рд░реА рд╡рд╛рд░реНрд╖рд┐рдХ рдкрд░реНрдЬрдиреНрдпрдорд╛рди (рдорд┐рдореА)", "recommend_button": "рдорд╛рдЭреНрдпрд╛ рдкрд┐рдХрд╛рдЪреА рд╢рд┐рдлрд╛рд░рд╕ рдХрд░рд╛", "success_msg": "рддреБрдордЪреНрдпрд╛ рдкрд░рд┐рд╕реНрдерд┐рддреАрд╕рд╛рдареА рд╕рд░реНрд╡рд╛рдд рдпреЛрдЧреНрдп рдкреАрдХ рдЖрд╣реЗ:", "header2": "рд╕реНрдорд╛рд░реНрдЯ рд╢реЗрддреА рд╕рд▓реНрд▓рд╛ рдорд┐рд│рд╡рд╛", "desc2": "рддреБрдордЪреНрдпрд╛ рдЗрдирдкреБрдЯ рдореВрд▓реНрдпрд╛рдВрд╡рд░ рдЖрдзрд╛рд░рд┐рдд рд╢рд┐рдлрд╛рд░рд╕реА.", "seasonal_advice": "рд╣рдВрдЧрд╛рдореА рд╕рд▓реНрд▓рд╛", "kharif_season": " рдирд┐рд╡рдбрд▓реЗрд▓реА рддрд╛рд░реАрдЦ рдЦрд░реАрдк рд╣рдВрдЧрд╛рдорд╛рдд (рдЬреВрди-рдСрдХреНрдЯреЛрдмрд░) рдпреЗрддреЗ. рд╣рд╛ рдореБрдЦреНрдп рдорд╛рдиреНрд╕реВрди рдкреЗрд░рдгреАрдЪрд╛ рд╣рдВрдЧрд╛рдо рдЖрд╣реЗ.", "rabi_season": " рдирд┐рд╡рдбрд▓реЗрд▓реА рддрд╛рд░реАрдЦ рд░рдмреНрдмреА рд╣рдВрдЧрд╛рдорд╛рдд (рдиреЛрд╡реНрд╣реЗрдВрдмрд░-рдорд╛рд░реНрдЪ) рдпреЗрддреЗ. рд╣рд╛ рд╣рд┐рд╡рд╛рд│реА рдкреЗрд░рдгреАрдЪрд╛ рд╣рдВрдЧрд╛рдо рдЖрд╣реЗ.", "zaid_season": " рдирд┐рд╡рдбрд▓реЗрд▓реА рддрд╛рд░реАрдЦ рдЭреИрдж рд╣рдВрдЧрд╛рдорд╛рдд (рдПрдкреНрд░рд┐рд▓-рдореЗ) рдпреЗрддреЗ. рд╣рд╛ рдХрдореА рдХрд╛рд▓рд╛рд╡рдзреАрдЪреНрдпрд╛ рдкрд┐рдХрд╛рдВрд╕рд╛рдареА рдЙрдиреНрд╣рд╛рд│реА рд╣рдВрдЧрд╛рдо рдЖрд╣реЗ.", "fert_advice": "рдЦрдд рд╢рд┐рдлрд╛рд░рд╕", "n_low": "рдирд╛рдпрдЯреНрд░реЛрдЬрди (N) рдХрдореА рдЖрд╣реЗ. рд╕реЗрдВрджреНрд░рд┐рдп рдХрдВрдкреЛрд╕реНрдЯ рдХрд┐рдВрд╡рд╛ рдирд╛рдпрдЯреНрд░реЛрдЬрдирдпреБрдХреНрдд рдЦрдд рдШрд╛рд▓рд╛.", "p_low": "рдлреЙрд╕реНрдлрд░рд╕ (P) рдХрдореА рдЖрд╣реЗ. рд╣рд╛рдбрд╛рдВрдЪреЗ рдЬреЗрд╡рдг рдХрд┐рдВрд╡рд╛ рдлреЙрд╕реНрдлреЗрдЯ рдЦрдд рдлрд╛рдпрджреЗрд╢реАрд░ рдард░реЗрд▓.", "k_low": "рдкреЛрдЯреЕрд╢рд┐рдпрдо (K) рдХрдореА рдЖрд╣реЗ. рд▓рд╛рдХрдбреА рд░рд╛рдЦ рдХрд┐рдВрд╡рд╛ рдкреЛрдЯреЕрд╢рдореБрд│реЗ рдореБрд│рд╛рдВрдЪреНрдпрд╛ рд╡рд┐рдХрд╛рд╕рд╛рд╕ рдорджрдд рд╣реЛрддреЗ.", "fert_ok": "рддреБрдордЪреНрдпрд╛ рдорд╛рддреАрддреАрд▓ рдкреЛрд╖рдХ рддрддреНрд╡рд╛рдВрдЪреА (N, P, K) рдкрд╛рддрд│реА рдЪрд╛рдВрдЧрд▓реА рдЖрд╣реЗ!", "water_advice": "рдЬрд▓ рд╡реНрдпрд╡рд╕реНрдерд╛рдкрди рд╕рд▓реНрд▓рд╛", "rain_low": "рдкрд░реНрдЬрдиреНрдпрдорд╛рди рдХрдореА рдЖрд╣реЗ. рд╕рд╛рддрддреНрдпрдкреВрд░реНрдг рд╕рд┐рдВрдЪрдирд╛рдЪреА рдпреЛрдЬрдирд╛ рдХрд░рд╛ рдЖрдгрд┐ рджреБрд╖реНрдХрд╛рд│-рдкреНрд░рддрд┐рд░реЛрдзрдХ рдкрд┐рдХрд╛рдВрдЪрд╛ рд╡рд┐рдЪрд╛рд░ рдХрд░рд╛.", "rain_ok": "рдкрд░реНрдЬрдиреНрдпрдорд╛рди рдкреБрд░реЗрд╕реЗ рдЖрд╣реЗ. рдЪрд╛рдВрдЧрд▓реНрдпрд╛ рдирд┐рдЪрд▒реНрдпрд╛рдЪреА рдЦрд╛рддреНрд░реА рдХрд░рд╛.", "pest_advice": "рдХреАрдб рдирд┐рдпрдВрддреНрд░рдг рд╕рд▓реНрд▓рд╛", "pest_warn": "рдЬрд╛рд╕реНрдд рдЖрд░реНрджреНрд░рддрд╛ рдЖрдгрд┐ рдЙрд╖реНрдгрддреЗрдореБрд│реЗ рдорд╛рд╡реНрдпрд╛рд╕рд╛рд░рдЦреНрдпрд╛ рдХреАрдЯрдХрд╛рдВрдирд╛ рдЖрдХрд░реНрд╖рд┐рдд рдХрд░реВ рд╢рдХрддреЗ. рдкрд┐рдХрд╛рдВрд╡рд░ рдмрд╛рд░рдХрд╛рдИрдиреЗ рд▓рдХреНрд╖ рдареЗрд╡рд╛.", "pest_ok": "рд╕рд░реНрд╡рд╕рд╛рдзрд╛рд░рдг рдХреАрдЯрдХрд╛рдВрд╕рд╛рдареА рдкрд░рд┐рд╕реНрдерд┐рддреА рдХрдореА рдЕрдиреБрдХреВрд▓ рдЖрд╣реЗ, рдкрд░рдВрддреБ рдирд┐рдпрдорд┐рдд рдирд┐рд░реАрдХреНрд╖рдг рдорд╣рддреНрддреНрд╡рд╛рдЪреЗ рдЖрд╣реЗ.", "header3": "рддреБрдордЪреНрдпрд╛ рд╢реЗрддрд╛рдЪреА рдЙрддреНрдкрд╛рджрдХрддрд╛ рд╡рд╛рдврд╡рдгреЗ", "desc3_1": "рдЖрдордЪреЗ рдПрдЖрдп рдкреНрд▓реЕрдЯрдлреЙрд░реНрдо рддреБрдореНрд╣рд╛рд▓рд╛ рд╣реБрд╢рд╛рд░ рдирд┐рд░реНрдгрдп рдШреЗрдгреНрдпрд╛рд╕ рдорджрдд рдХрд░рддреЗ рдЬреНрдпрд╛рдореБрд│реЗ рддреБрдордЪреНрдпрд╛ рд╢реЗрддрд╛рдЪреЗ рдЙрддреНрдкрд╛рджрди рдереЗрдЯ рд╡рд╛рдвреВ рд╢рдХрддреЗ.", "metric_label": "рд╕рдВрднрд╛рд╡реНрдп рдЙрддреНрдкрд╛рджрдХрддрд╛ рд╡рд╛рдв", "desc3_2": "рдЖрдореНрд╣реА рд╣реЗ рдХрд╕реЗ рд╕рд╛рдзреНрдп рдХрд░рддреЛ?", "point1": "рдЙрддреНрдкрдиреНрди рдЕрдВрджрд╛рдЬ рдореЙрдбреЗрд▓: рдЖрдордЪреЗ рджреБрд╕рд░реЗ рдПрдЖрдп рдореЙрдбреЗрд▓ рд╕рдВрднрд╛рд╡реНрдп рдЙрддреНрдкрдиреНрдирд╛рдЪрд╛ рдЕрдВрджрд╛рдЬ рд▓рд╛рд╡рдгреНрдпрд╛рд╕рд╛рдареА рдРрддрд┐рд╣рд╛рд╕рд┐рдХ рдбреЗрдЯрд╛рдЪреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░рддреЗ.", "point2": "рдХрдореА рдЕрдкрд╡реНрдпрдп: рд╕реНрдорд╛рд░реНрдЯ рдЦрдд рд╕рд▓реНрд▓реНрдпрд╛рдореБрд│реЗ рддреБрдореНрд╣реА рдлрдХреНрдд рдЧрд░рдЬреЗрдиреБрд╕рд╛рд░ рд╡рд╛рдкрд░рддрд╛, рдЬреНрдпрд╛рдореБрд│реЗ рдкреИрд╢рд╛рдВрдЪреА рдмрдЪрдд рд╣реЛрддреЗ.", "point3": "рдЬреЛрдЦреАрдо рдХрдореА рдХрд░рдгреЗ: рдХреАрдЯрдХ рдЖрдгрд┐ рдкрд╛рдгреНрдпрд╛рдЪреНрдпрд╛ рдЧрд░рдЬреЗрдмрджреНрджрд▓ рд▓рд╡рдХрд░ рдЪреЗрддрд╛рд╡рдгреА рддреБрдордЪреНрдпрд╛ рдкрд┐рдХрд╛рдВрдЪреЗ рд╕рдВрд░рдХреНрд╖рдг рдХрд░рдгреНрдпрд╛рд╕ рдорджрдд рдХрд░рддреЗ."
    },
    "Odia (рмУрмбрм╝рм┐рмЖ)": {
        "title": "рмПрмЖрмЗ рмХрнГрм╖рмХ рм╕рм╣рм╛рнЯрмХ ЁЯзСтАНЁЯМ╛", "subtitle": "рмЖрмкрмгрмЩрнНрмХ рмлрм╛рм░рнНрмо рмкрм╛рмЗрмБ рмдрмернНрнЯ-рмЖрмзрм╛рм░рм┐рмд рмкрм░рм╛рморм░рнНрм╢ рмкрм╛рмЖрмирнНрмдрнБ |", "sidebar_title": "рм╕рнЗрмЯрм┐рмВрм╕рморнВрм╣", "lang_select": "рмнрм╛рм╖рм╛", "tab1_title": "ЁЯМ▒ рмлрм╕рм▓ рм╕рнБрмкрм╛рм░рм┐рм╢", "tab2_title": "ЁЯТб рмХрм╛рм░рнНрмпрнНрнЯрм╛рмирнБрм╖рнНрмарм╛рми рмкрм░рм╛рморм░рнНрм╢", "tab3_title": "ЁЯУИ рмЙрмдрнНрмкрм╛рмжрмХрмдрм╛ рмЕрмирнНрмдрм░рнНрмжрнГрм╖рнНрмЯрм┐", "header1": "рмЙрмкрмпрнБрмХрнНрмд рмлрм╕рм▓ рмЦрнЛрмЬрмирнНрмдрнБ", "date_label": "рмЖрмЬрм┐рм░ рмдрм╛рм░рм┐рмЦ рммрм╛рмЫрмирнНрмдрнБ |", "location_select": "рм▓рм╛рмЗрмнрнН рмбрм╛рмЯрм╛ рмкрм╛рмЗрммрм╛рмХрнБ рмПрмХ рм╕рнНрмерм╛рми рммрм╛рмЫрмирнНрмдрнБ |", "api_button": "рм▓рм╛рмЗрмнрнН рмкрм╛рмгрм┐рмкрм╛рмЧ рмбрм╛рмЯрм╛ рмкрм╛рмЖрмирнНрмдрнБ (рммрм╛рм╕рнНрмдрмм API)", "api_desc": "рмПрмХ рм╕рм╣рм░ рммрм╛рмЫрмирнНрмдрнБ рмПрммрмВ рм▓рм╛рмЗрмнрнН API рм░рнБ рммрм╛рм╕рнНрмдрмм рм╕рморнЯ рмкрм╛рмгрм┐рмкрм╛рмЧ рмбрм╛рмЯрм╛ рмкрм╛рмЗрммрм╛рмХрнБ рммрмЯрмирнН рмХрнНрм▓рм┐рмХрнН рмХрм░рмирнНрмдрнБ |", "n_label": "рморм╛рмЯрм┐рм░рнЗ рмирм╛рмЗрмЯрнНрм░рнЛрмЬрнЗрмирнН (N) (рмХрм┐рмЧрнНрм░рм╛/рм╣рнЗрмХрнНрмЯрм░)", "p_label": "рморм╛рмЯрм┐рм░рнЗ рмлрм╕рмлрм░рм╕рнН (P) (рмХрм┐рмЧрнНрм░рм╛/рм╣рнЗрмХрнНрмЯрм░)", "k_label": "рморм╛рмЯрм┐рм░рнЗ рмкрнЛрмЯрм╛рм╕рм┐рнЯрморнН (K) (рмХрм┐рмЧрнНрм░рм╛/рм╣рнЗрмХрнНрмЯрм░)", "temp_label": "рмдрм╛рмкрморм╛рмдрнНрм░рм╛ (┬░C)", "hum_label": "рмЖрмкрнЗрмХрнНрм╖рм┐рмХ рмЖрм░рнНрмжрнНрм░рмдрм╛ (%)", "ph_label": "рморм╛рмЯрм┐рм░ рмкрм┐рмПрмЪрнН", "rain_label": "рм╣рм╛рм░рм╛рм╣рм╛рм░рм┐ рммрм╛рм░рнНрм╖рм┐рмХ рммрм░рнНрм╖рм╛ (рморм┐рморм┐)", "recommend_button": "рморнЛ рмлрм╕рм▓ рм╕рнБрмкрм╛рм░рм┐рм╢ рмХрм░рмирнНрмдрнБ", "success_msg": "рмЖрмкрмгрмЩрнНрмХ рм╕рнНрмерм┐рмдрм┐ рмкрм╛рмЗрмБ рм╕рммрнБрмарм╛рм░рнБ рмЙрмкрмпрнБрмХрнНрмд рмлрм╕рм▓ рм╣рнЗрмЙрмЫрм┐:", "header2": "рм╕рнНрморм╛рм░рнНрмЯ рмЪрм╛рм╖ рмкрм░рм╛рморм░рнНрм╢ рмкрм╛рмЖрмирнНрмдрнБ", "desc2": "рмЖрмкрмгрмЩрнНрмХ рмЗрмирмкрнБрмЯрнН рморнВрм▓рнНрнЯ рмЙрмкрм░рнЗ рмЖрмзрм╛рм░рм┐рмд рм╕рнБрмкрм╛рм░рм┐рм╢ |", "seasonal_advice": "рмЛрмдрнБрмХрм╛рм│рнАрми рмкрм░рм╛рморм░рнНрм╢", "kharif_season": "рмЪрнЯрмирм┐рмд рмдрм╛рм░рм┐рмЦ рмЦрм░рм┐рмл рмЛрмдрнБрм░рнЗ (рмЬрнБрмирнН-рмЕрмХрнНрмЯрнЛрммрм░) рмЖрм╕рнЗ | рмПрм╣рм╛ рморнБрмЦрнНрнЯ рморнМрм╕рнБрморнА рммрнБрмгрм┐рммрм╛ рмЛрмдрнБ |", "rabi_season": "рмЪрнЯрмирм┐рмд рмдрм╛рм░рм┐рмЦ рм░рммрм┐ рмЛрмдрнБрм░рнЗ (рмирмнрнЗрморнНрммрм░-рморм╛рм░рнНрмЪрнНрмЪ) рмЖрм╕рнЗ | рмПрм╣рм╛ рм╢рнАрмдрмХрм╛рм│рнАрми рммрнБрмгрм┐рммрм╛ рмЛрмдрнБ |", "zaid_season": "рмЪрнЯрмирм┐рмд рмдрм╛рм░рм┐рмЦ рмЬрнЯрмж рмЛрмдрнБрм░рнЗ (рмПрмкрнНрм░рм┐рм▓-рморнЗ) рмЖрм╕рнЗ | рмПрм╣рм╛ рмХрморнН рмЕрммрмзрм┐рм░ рмлрм╕рм▓ рмкрм╛рмЗрмБ рмЧрнНрм░рнАрм╖рнНрмо рмЛрмдрнБ |", "fert_advice": "рм╕рм╛рм░ рм╕рнБрмкрм╛рм░рм┐рм╢", "n_low": "рмирм╛рмЗрмЯрнНрм░рнЛрмЬрнЗрмирнН (N) рмХрморнН рмЕрмЫрм┐ | рмЬрнИрммрм┐рмХ рмХрморнНрмкрнЛрм╖рнНрмЯ рмХрм┐рморнНрммрм╛ рмирм╛рмЗрмЯрнНрм░рнЛрмЬрнЗрмирнН-рмпрнБрмХрнНрмд рм╕рм╛рм░ рмпрнЛрмЧ рмХрм░рмирнНрмдрнБ |", "p_low": "рмлрм╕рмлрм░рм╕рнН (P) рмХрморнН рмЕрмЫрм┐ | рм╣рм╛рмб рмЧрнБрмгрнНрмб рмХрм┐рморнНрммрм╛ рмлрм╕рмлрнЗрмЯрнН рм╕рм╛рм░ рм▓рм╛рмнрмжрм╛рнЯрмХ рм╣рнЗрмм |", "k_low": "рмкрнЛрмЯрм╛рм╕рм┐рнЯрморнН (K) рмХрморнН рмЕрмЫрм┐ | рмХрм╛рма рмкрм╛рмЙрмБрм╢ рмХрм┐рморнНрммрм╛ рмкрнЛрмЯрм╛рм╢рнН рморнВрм│рм░ рммрм┐рмХрм╛рм╢рм░рнЗ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмХрм░рм┐рмкрм╛рм░рм┐рмм |", "fert_ok": "рмЖрмкрмгрмЩрнНрмХ рморм╛рмЯрм┐рм░ рмкрнЛрм╖рмХ рм╕рнНрмдрм░ (N, P, K) рмнрм▓ рмжрнЗрмЦрм╛рмпрм╛рмЙрмЫрм┐!", "water_advice": "рмЬрм│ рмкрм░рм┐рмЪрм╛рм│рмирм╛ рмкрм░рм╛рморм░рнНрм╢", "rain_low": "рммрм░рнНрм╖рм╛ рмХрморнН рмЕрмЫрм┐ | рмирм┐рм░рмирнНрмдрм░ рмЬрм│рм╕рнЗрмЪрми рмкрм╛рмЗрмБ рмпрнЛрмЬрмирм╛ рмХрм░рмирнНрмдрнБ рмПрммрмВ рморм░рнБрмбрм╝рм┐-рмкрнНрм░рмдрм┐рм░рнЛрмзрнА рмлрм╕рм▓ рммрм┐рмЪрм╛рм░ рмХрм░рмирнНрмдрнБ |", "rain_ok": "рммрм░рнНрм╖рм╛ рмкрм░рнНрмпрнНрнЯрм╛рмкрнНрмд рмЕрмЫрм┐ | рмнрм▓ рмЬрм│ рмирм┐рм╖рнНрмХрм╛рм╕рми рм╕рнБрмирм┐рм╢рнНрмЪрм┐рмд рмХрм░рмирнНрмдрнБ |", "pest_advice": "рмХрнАрмЯ рмирм┐рнЯрмирнНрмдрнНрм░рмг рмкрм░рм╛рморм░рнНрм╢", "pest_warn": "рмЕрмзрм┐рмХ рмЖрм░рнНрмжрнНрм░рмдрм╛ рмПрммрмВ рмЙрмдрнНрмдрм╛рмк рмПрмлрм┐рмбрнНрм╕ рмкрм░рм┐ рмХрнАрмЯрморм╛рмирмЩрнНрмХрнБ рмЖрмХрм░рнНрм╖рм┐рмд рмХрм░рм┐рмкрм╛рм░рнЗ | рмлрм╕рм▓рмЧрнБрмбрм╝рм┐рмХрнБ рмирм┐рмХрмЯрм░рнБ рмирм┐рм░рнАрмХрнНрм╖рмг рмХрм░рмирнНрмдрнБ |", "pest_ok": "рм╕рм╛рмзрм╛рм░рмг рмХрнАрмЯрморм╛рмирмЩрнНрмХ рмкрм╛рмЗрмБ рм╕рнНрмерм┐рмдрм┐ рмХрморнН рмЕрмирнБрмХрнВрм│, рмХрм┐рмирнНрмдрнБ рмирм┐рнЯрморм┐рмд рмирм┐рм░рнАрмХрнНрм╖рмг рмЧрнБрм░рнБрмдрнНрн▒рмкрнВрм░рнНрмгрнНрмг |", "header3": "рмЖрмкрмгрмЩрнНрмХ рмлрм╛рм░рнНрморм░ рмЙрмдрнНрмкрм╛рмжрмХрмдрм╛ рммрнГрмжрнНрмзрм┐", "desc3_1": "рмЖрморм░ рмПрмЖрмЗ рмкрнНрм▓рм╛рмЯрмлрм░рнНрмо рмЖрмкрмгрмЩрнНрмХрнБ рмЪрмдрнБрм░ рмирм┐рм╖рнНрмкрмдрнНрмдрм┐ рмирнЗрммрм╛рм░рнЗ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмХрм░рнЗ рмпрм╛рм╣рм╛ рмЖрмкрмгрмЩрнНрмХ рмлрм╛рм░рнНрморм░ рмЙрмдрнНрмкрм╛рмжрмирмХрнБ рм╕рм┐рмзрм╛рм╕рм│рмЦ рммрмврм╛рмЗрмкрм╛рм░рнЗ |", "metric_label": "рм╕рморнНрмнрм╛рммрнНрнЯ рмЙрмдрнНрмкрм╛рмжрмХрмдрм╛ рммрнГрмжрнНрмзрм┐", "desc3_2": "рмЖрморнЗ рмПрм╣рм╛ рмХрм┐рмкрм░рм┐ рм╣рм╛рм╕рм▓ рмХрм░рнБ?", "point1": "рмЙрмкрмЬ рмкрнВрм░рнНрммрм╛рмирнБрморм╛рми рмормбрнЗрм▓рнН: рмЖрморм░ рмжрнНрн▒рм┐рмдрнАрнЯ рмПрмЖрмЗ рмормбрнЗрм▓рнН рм╕рморнНрмнрм╛рммрнНрнЯ рмЙрмкрмЬрм░ рмкрнВрм░рнНрммрм╛рмирнБрморм╛рми рмХрм░рм┐рммрм╛рмХрнБ рмРрмдрм┐рм╣рм╛рм╕рм┐рмХ рмдрмернНрнЯ рммрм┐рм╢рнНрм│рнЗрм╖рмг рмХрм░рнЗ |", "point2": "рмХрморнН рммрм░рнНрмЬрнНрнЯрммрм╕рнНрмдрнБ: рм╕рнНрморм╛рм░рнНрмЯ рм╕рм╛рм░ рмкрм░рм╛рморм░рнНрм╢рм░ рмЕрм░рнНрме рмЖрмкрмг рмХрнЗрммрм│ рмЖрммрм╢рнНрнЯрмХрмдрм╛ рмЕрмирнБрмпрм╛рнЯрнА рммрнНрнЯрммрм╣рм╛рм░ рмХрм░рмирнНрмдрм┐, рмпрм╛рм╣рм╛ рмЯрмЩрнНрмХрм╛ рммрмЮрнНрмЪрм╛рмП |", "point3": "рммрм┐рмкрмж рм╣рнНрм░рм╛рм╕: рмХрнАрмЯ рмПрммрмВ рмкрм╛рмгрм┐рм░ рмЖрммрм╢рнНрнЯрмХрмдрм╛ рммрм┐рм╖рнЯрм░рнЗ рм╢рнАрмШрнНрм░ рмЪрнЗрмдрм╛рммрмирнА рмЖрмкрмгрмЩрнНрмХ рмлрм╕рм▓рмХрнБ рм╕рнБрм░рмХрнНрм╖рм╛ рмжрнЗрммрм╛рм░рнЗ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмХрм░рнЗ |"
    },
    "Bhojpuri (рднреЛрдЬрдкреБрд░реА)": {
        "title": "рдПрдЖрдИ рдХрд┐рд╕рд╛рди рд╕рд╣рд╛рдпрдХ ЁЯзСтАНЁЯМ╛", "subtitle": "рдЖрдкрди рдЦреЗрдд рдЦрд╛рддрд┐рд░ рдбреЗрдЯрд╛-рдЖрдзрд╛рд░рд┐рдд рд╕рд▓рд╛рд╣ рдкрд╛рдИрдВред", "sidebar_title": "рд╕реЗрдЯрд┐рдВрдЧреНрд╕", "lang_select": "рднрд╛рд╖рд╛", "tab1_title": "ЁЯМ▒ рдлрд╕рд▓ рдХреЗ рд╕рд┐рдлрд╛рд░рд┐рд╢", "tab2_title": "ЁЯТб рдХрд╛рд░реНрд░рд╡рд╛рдИ рд▓рд╛рдпрдХ рд╕рд▓рд╛рд╣", "tab3_title": "ЁЯУИ рдЙрддреНрдкрд╛рджрдХрддрд╛ рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐", "header1": "рд╕рд╣реА рдлрд╕рд▓ рдЦреЛрдЬреАрдВ", "date_label": "рдЖрдЬ рдХреЗ рддрд╛рд░реАрдЦ рдЪреБрдиреАрдВ", "location_select": "рд▓рд╛рдЗрд╡ рдбреЗрдЯрд╛ рдкрд╛рд╡реЗ рдЦрд╛рддрд┐рд░ рдПрдЧреЛ рд▓реЛрдХреЗрд╢рди рдЪреБрдиреАрдВ", "api_button": "рд▓рд╛рдЗрд╡ рдореМрд╕рдо рдбреЗрдЯрд╛ рдкрд╛рдИрдВ (рд░рд┐рдпрд▓ рдПрдкреАрдЖрдИ)", "api_desc": "рдПрдЧреЛ рд╢рд╣рд░ рдЪреБрдиреАрдВ рдЖ рд▓рд╛рдЗрд╡ рдПрдкреАрдЖрдИ рд╕реЗ рд░рд┐рдпрд▓-рдЯрд╛рдЗрдо рдореМрд╕рдо рдбреЗрдЯрд╛ рдкрд╛рд╡реЗ рдЦрд╛рддрд┐рд░ рдмрдЯрди рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реАрдВред", "n_label": "рдорд╛рдЯреА рдореЗрдВ рдирд╛рдЗрдЯреНрд░реЛрдЬрди (N) (рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░)", "p_label": "рдорд╛рдЯреА рдореЗрдВ рдлрд╛рд╕реНрдлреЛрд░рд╕ (P) (рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░)", "k_label": "рдорд╛рдЯреА рдореЗрдВ рдкреЛрдЯреЗрд╢рд┐рдпрдо (K) (рдХрд┐рдЧреНрд░рд╛/рд╣реЗрдХреНрдЯреЗрдпрд░)", "temp_label": "рддрд╛рдкрдорд╛рди (┬░C)", "hum_label": "рд╕рд╛рдкреЗрдХреНрд╖ рдЖрд░реНрджреНрд░рддрд╛ (%)", "ph_label": "рдорд╛рдЯреА рдХреЗ рдкреАрдПрдЪ", "rain_label": "рдФрд╕рдд рд╡рд╛рд░реНрд╖рд┐рдХ рдмрд░рд╕рд╛рдд (рдорд┐рдореА)", "recommend_button": "рд╣рдорд░рд╛ рдлрд╕рд▓ рдХреЗ рд╕рд┐рдлрд╛рд░рд┐рд╢ рдХрд░реАрдВ", "success_msg": "рд░рд╛рдЙрд░ рдкрд░рд┐рд╕реНрдерд┐рддрд┐ рдЦрд╛рддрд┐рд░ рд╕рдмрд╕реЗ рдЙрдкрдпреБрдХреНрдд рдлрд╕рд▓ рд╣:", "header2": "рд╕реНрдорд╛рд░реНрдЯ рдЦреЗрддреА рдХреЗ рд╕рд▓рд╛рд╣ рдкрд╛рдИрдВ", "desc2": "рд░рд╛рдЙрд░ рджрд┐рд╣рд▓ рдорд╛рди рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд╕рд┐рдлрд╛рд░рд┐рд╢ред", "seasonal_advice": "рдореМрд╕рдореА рд╕рд▓рд╛рд╣", "kharif_season": "рдЪреБрдирд▓ рддрд╛рд░реАрдЦ рдЦрд░реАрдл рдореМрд╕рдо (рдЬреВрди-рдЕрдХреНрдЯреВрдмрд░) рдореЗрдВ рдкрдбрд╝реЗрд▓рд╛ред рдЗ рдореБрдЦреНрдп рдорд╛рдирд╕реВрди рдХреЗ рдмреЛрд╡рд╛рдИ рдХреЗ рдореМрд╕рдо рд╣ред", "rabi_season": "рдЪреБрдирд▓ рддрд╛рд░реАрдЦ рд░рдмреА рдореМрд╕рдо (рдирд╡рдВрдмрд░-рдорд╛рд░реНрдЪ) рдореЗрдВ рдкрдбрд╝реЗрд▓рд╛ред рдЗ рдЬрд╛рдбрд╝рд╛ рдХреЗ рдмреЛрд╡рд╛рдИ рдХреЗ рдореМрд╕рдо рд╣ред", "zaid_season": "рдЪреБрдирд▓ рддрд╛рд░реАрдЦ рдЬрд╛рдпрдж рдореМрд╕рдо (рдЕрдкреНрд░реИрд▓-рдордИ) рдореЗрдВ рдкрдбрд╝реЗрд▓рд╛ред рдЗ рдХрдо рд╕рдордп рдХреЗ рдлрд╕рд▓ рдЦрд╛рддрд┐рд░ рдЧрд░реНрдореА рдХреЗ рдореМрд╕рдо рд╣ред", "fert_advice": "рдЙрд░реНрд╡рд░рдХ рдХреЗ рд╕рд┐рдлрд╛рд░рд┐рд╢", "n_low": "рдирд╛рдЗрдЯреНрд░реЛрдЬрди (N) рдХрдо рдмрд╛ред рдЬреИрд╡рд┐рдХ рдЦрд╛рдж рднрд╛ рдирд╛рдЗрдЯреНрд░реЛрдЬрди рд╡рд╛рд▓рд╛ рдЙрд░реНрд╡рд░рдХ рдбрд╛рд▓реАрдВред", "p_low": "рдлрд╛рд╕реНрдлреЛрд░рд╕ (P) рдХрдо рдмрд╛ред рд╣рдбреНрдбреА рдХреЗ рдЪреВрд░рд╛ рднрд╛ рдлрд╛рд╕реНрдлреЗрдЯ рдЙрд░реНрд╡рд░рдХ рдлрд╛рдпрджреЗрдордВрдж рд╣реЛрдИред", "k_low": "рдкреЛрдЯреЗрд╢рд┐рдпрдо (K) рдХрдо рдмрд╛ред рд▓рдХрдбрд╝реА рдХреЗ рд░рд╛рдЦ рднрд╛ рдкреЛрдЯрд╛рд╢ рдЬрдбрд╝ рдХреЗ рд╡рд┐рдХрд╛рд╕ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХреЗрд▓рд╛ред", "fert_ok": "рд░рд╛рдЙрд░ рдорд╛рдЯреА рдХреЗ рдкреЛрд╖рдХ рддрддреНрд╡ (N, P, K) рдХреЗ рд╕реНрддрд░ рдареАрдХ рд▓рд╛рдЧрдд рдмрд╛!", "water_advice": "рдЬрд▓ рдкреНрд░рдмрдВрдзрди рд╕рд▓рд╛рд╣", "rain_low": "рдмрд░рд╕рд╛рдд рдХрдо рдмрд╛ред рд▓рдЧрд╛рддрд╛рд░ рд╕рд┐рдВрдЪрд╛рдИ рдХреЗ рдпреЛрдЬрдирд╛ рдмрдирд╛рдИрдВ рдЕрд╡реБрд░реА рд╕реВрдЦрд╛ рдкреНрд░рддрд┐рд░реЛрдзреА рдлрд╕рд▓ рдкрд░ рд╡рд┐рдЪрд╛рд░ рдХрд░реАрдВред", "rain_ok": "рдмрд░рд╕рд╛рдд рдкрд░реНрдпрд╛рдкреНрдд рдмрд╛ред рдмрдврд╝рд┐рдпрд╛ рдЬрд▓ рдирд┐рдХрд╛рд╕реА рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реАрдВред", "pest_advice": "рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг рд╕рд▓рд╛рд╣", "pest_warn": "рдЬрд╛рджрд╛ рдирдореА рдЕрд╡реБрд░реА рдЧрд░реНрдореА рдПрдлрд┐рдбреНрд╕ рдЬрдЗрд╕рди рдХреАрдЯ рдХреЗ рдЖрдХрд░реНрд╖рд┐рдд рдХрд░ рд╕рдХреЗрд▓рд╛ред рдлрд╕рд▓ рдкрд░ рдирд┐рдорди рд╕реЗ рдирдЬрд░ рд░рдЦреАрдВред", "pest_ok": "рдЖрдо рдХреАрдЯ рдЦрд╛рддрд┐рд░ рд╕реНрдерд┐рддрд┐ рдХрдо рдЕрдиреБрдХреВрд▓ рдмрд╛, рд▓реЗрдХрд┐рди рдирд┐рдпрдорд┐рдд рдирд┐рдЧрд░рд╛рдиреА рдЬрд░реВрд░реА рдмрд╛ред", "header3": "рдЖрдкрди рдЦреЗрдд рдХреЗ рдЙрддреНрдкрд╛рджрдХрддрд╛ рдмрдврд╝рд╛рд╡рд▓", "desc3_1": "рд╣рдордиреА рдХреЗ рдПрдЖрдИ рдкреНрд▓реЗрдЯрдлрд╛рд░реНрдо рд░рд╛рдЙрд░ рдХреЗ рд╕реНрдорд╛рд░реНрдЯ рдирд┐рд░реНрдгрдп рд▓реЗрд╡реЗ рдореЗрдВ рдорджрдж рдХрд░реЗрд▓рд╛ рдЬрд╡рди рд╕реАрдзреЗ рд░рд╛рдЙрд░ рдЦреЗрдд рдХреЗ рдЙрддреНрдкрд╛рджрди рдмрдврд╝рд╛ рд╕рдХреЗрд▓рд╛ред", "metric_label": "рд╕рдВрднрд╛рд╡рд┐рдд рдЙрддреНрдкрд╛рджрдХрддрд╛ рдмрдврд╝реЛрддрд░реА", "desc3_2": "рд╣рдордиреА рдХреЗ рдЗ рдХрдИрд╕реЗ рд╣рд╛рд╕рд┐рд▓ рдХрд░рд┐рд▓реЗ?", "point1": "рдЙрдкрдЬ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдореЙрдбрд▓: рд╣рдордиреА рдХреЗ рджреВрд╕рд░рд╛ рдПрдЖрдИ рдореЙрдбрд▓ рд╕рдВрднрд╛рд╡рд┐рдд рдЙрдкрдЬ рдХреЗ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреА рдХрд░реЗ рдЦрд╛рддрд┐рд░ рдРрддрд┐рд╣рд╛рд╕рд┐рдХ рдбреЗрдЯрд╛ рдХреЗ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрд▓рд╛ред", "point2": "рдХрдо рдмрд░реНрдмрд╛рджреА: рд╕реНрдорд╛рд░реНрдЯ рдЙрд░реНрд╡рд░рдХ рд╕рд▓рд╛рд╣ рдХреЗ рдорддрд▓рдм рдмрд╛ рдХрд┐ рд░рдЙрдЖ рдЦрд╛рд▓реА рдУрддрдиреЗ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реАрдВ рдЬреЗрддрдирд╛ рдЬрд░реВрд░рдд рдмрд╛, рдЬрд╡рдирд╛ рд╕реЗ рдкрдИрд╕рд╛ рдмрдЪреЗрд▓рд╛ред", "point3": "рдЬреЛрдЦрд┐рдо рдХрдо рдХрдИрд▓: рдХреАрдЯ рдЕрд╡реБрд░реА рдкрд╛рдиреА рдХреЗ рдЬрд░реВрд░рдд рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкрд╣рд┐рд▓реЗ рд╕реЗ рдЪреЗрддрд╛рд╡рдиреА рд░рд╛рдЙрд░ рдлрд╕рд▓ рдХреЗ рд░рдХреНрд╖рд╛ рдХрд░реЗ рдореЗрдВ рдорджрдж рдХрд░реЗрд▓рд╛ред"
    }
}

# --- Helper function to determine the season ---
def get_season(date):
    month = date.month
    if 6 <= month <= 10: return "kharif_season"
    elif 11 <= month or month <= 3: return "rabi_season"
    else: return "zaid_season"

# --- Helper function to load Lottie animation from URL ---
def load_lottieurl(url: str):
    r = requests.get(url)
    if r.status_code != 200:
        return None
    return r.json()

# --- REAL API FUNCTION ---
def get_live_data(latitude, longitude):
    try:
        api_url = f"https://api.open-meteo.com/v1/forecast?latitude={latitude}&longitude={longitude}&current_weather=true"
        response = requests.get(api_url)
        data = response.json()
        temperature = data['current_weather']['temperature']
        humidity = 60 + (temperature * 0.8) 
        return {"temperature": temperature, "humidity": humidity}
    except Exception as e:
        st.error(f"Error fetching data from API: {e}")
        return None

# --- Page Configuration ---
st.set_page_config(page_title="AI Farmer's Assistant", page_icon="ЁЯзСтАНЁЯМ╛", layout="wide")

# --- Custom CSS for Styling ---
st.markdown("""
<style>
    .stButton>button {
        background-color: #4A9A41; color: white; border-radius: 20px; border: 2px solid #4A9A41;
        padding: 10px 20px; font-size: 16px; font-weight: bold; transition: all 0.3s ease;
    }
    .stButton>button:hover {
        background-color: white; color: #4A9A41; border-color: #4A9A41;
    }
</style>
""", unsafe_allow_html=True)

# --- Initialize Session State ---
if 'api_data' not in st.session_state:
    st.session_state.api_data = {}

# --- Lottie Animation ---
lottie_url = "https://assets9.lottiefiles.com/packages/lf20_AYj382.json"
lottie_json = load_lottieurl(lottie_url)

# --- Sidebar ---
with st.sidebar:
    if lottie_json:
        st_lottie(lottie_json, speed=1, height=150, key="initial")
    st.title(translations["English"]["sidebar_title"]) # Sidebar title is always English for clarity
    language = st.selectbox(translations["English"]["lang_select"], list(translations.keys()))
    lang = translations.get(language, translations["English"])

# --- Main Page Content ---
st.title(lang["title"])
st.write(lang["subtitle"])

tab1, tab2, tab3 = st.tabs([lang.get("tab1_title"), lang.get("tab2_title"), lang.get("tab3_title")])

locations = { "Mumbai": (19.0760, 72.8777), "Delhi": (28.7041, 77.1025), "Bhubaneswar (Odisha)": (20.2961, 85.8245), "Patna (Bhojpuri Region)": (25.5941, 85.1376) }

with tab1:
    st.header(lang["header1"])
    selected_date = st.date_input(lang["date_label"], datetime.now())
    st.info(lang["api_desc"])
    selected_location = st.selectbox(lang["location_select"], list(locations.keys()))
    if st.button(lang["api_button"]):
        lat, lon = locations[selected_location]
        with st.spinner(f"Fetching live weather for {selected_location}..."):
            live_data = get_live_data(lat, lon)
            if live_data:
                st.session_state.api_data = live_data
                st.success("Live data loaded successfully!")

    temp_val = st.session_state.api_data.get("temperature", 25.0)
    hum_val = st.session_state.api_data.get("humidity", 70.0)

    col1, col2, col3 = st.columns(3)
    with col1: N = st.number_input(lang["n_label"], 0, 140, 90)
    with col2: P = st.number_input(lang["p_label"], 5, 145, 42)
    with col3: K = st.number_input(lang["k_label"], 5, 205, 43)

    temperature = st.slider(lang["temp_label"], -10.0, 50.0, temp_val)
    humidity = st.slider(lang["hum_label"], 10.0, 100.0, hum_val)
    ph = st.slider(lang["ph_label"], 3.5, 9.0, 6.5)
    rainfall = st.slider(lang["rain_label"], 20.0, 400.0, 150.0)

    if st.button(lang["recommend_button"]):
        input_data = pd.DataFrame({'N': [N], 'P': [P], 'K': [K], 'temperature': [temperature], 'humidity': [humidity], 'ph': [ph], 'rainfall': [rainfall]})
        prediction = crop_model.predict(input_data)
        st.success(f"{lang['success_msg']} **{prediction[0].capitalize()}**")

with tab2:
    st.header(lang["header2"])
    st.subheader(lang["seasonal_advice"])
    season_key = get_season(selected_date)
    st.success(lang[season_key])
    
    st.subheader(lang["fert_advice"])
    if N < 80: st.info(lang["n_low"])
    if P < 40: st.info(lang["p_low"])
    if K < 40: st.info(lang["k_low"])
    if not (N < 80 or P < 40 or K < 40): st.success(lang["fert_ok"])
    
    st.subheader(lang["water_advice"])
    if rainfall < 120: st.warning(lang["rain_low"])
    else: st.success(lang["rain_ok"])

    st.subheader(lang["pest_advice"])
    if humidity > 80 and temperature > 28: st.warning(lang["pest_warn"])
    else: st.success(lang["pest_ok"])

with tab3:
    st.header(lang["header3"])
    st.metric(label=lang["metric_label"], value="10-15%")
    st.write(lang["desc3_1"])
    st.subheader(lang["desc3_2"])
    st.markdown(f"- **{lang['point1']}**")
    st.markdown(f"- **{lang['point2']}**")
    st.markdown(f"- **{lang['point3']}**")